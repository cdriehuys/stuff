//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// APIError defines model for APIError.
type APIError struct {
	// Fields An array of errors associated with specific fields.
	Fields *[]FieldError `json:"fields,omitempty"`

	// Message A high-level overview of the error condition.
	Message *string `json:"message,omitempty"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	// Field The name of a field that failed validation.
	Field string `json:"field"`

	// Message A description of why the field is invalid.
	Message string `json:"message"`
}

// Model defines model for Model.
type Model struct {
	// CreatedAt The instant the vendor was added to the system.
	CreatedAt time.Time `json:"createdAt"`

	// Id A unique identifier for the model.
	Id int `json:"id"`

	// Model The unique vendor-provided identifier for the model.
	Model string `json:"model"`

	// Name A readable name for the vendor.
	Name string `json:"name"`

	// UpdatedAt The instant the vendor's information was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// VendorID The ID of the vendor who produces the model.
	VendorID int `json:"vendorID"`
}

// ModelCollection defines model for ModelCollection.
type ModelCollection struct {
	Items []Model `json:"items"`
}

// NewVendor defines model for NewVendor.
type NewVendor struct {
	// Name A readable name for the vendor.
	Name string `json:"name" validate:"required,min=1,max=150"`
}

// Vendor defines model for Vendor.
type Vendor struct {
	// CreatedAt The instant the vendor was added to the system.
	CreatedAt time.Time `json:"created_at"`

	// Id A unique identifier for the vendor.
	Id int `json:"id"`

	// Name A readable name for the vendor.
	Name string `json:"name"`

	// UpdatedAt The instant the vendor's information was last updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// VendorCollection defines model for VendorCollection.
type VendorCollection struct {
	Items []Vendor `json:"items"`
}

// PostVendorsJSONRequestBody defines body for PostVendors for application/json ContentType.
type PostVendorsJSONRequestBody = NewVendor

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /models)
	GetModels(w http.ResponseWriter, r *http.Request)

	// (GET /vendors)
	GetVendors(w http.ResponseWriter, r *http.Request)

	// (POST /vendors)
	PostVendors(w http.ResponseWriter, r *http.Request)

	// (DELETE /vendors/{vendorID})
	DeleteVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int)

	// (GET /vendors/{vendorID})
	GetVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetModels operation middleware
func (siw *ServerInterfaceWrapper) GetModels(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVendors operation middleware
func (siw *ServerInterfaceWrapper) GetVendors(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVendors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostVendors operation middleware
func (siw *ServerInterfaceWrapper) PostVendors(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostVendors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteVendorsVendorID operation middleware
func (siw *ServerInterfaceWrapper) DeleteVendorsVendorID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendorID" -------------
	var vendorID int

	err = runtime.BindStyledParameterWithOptions("simple", "vendorID", r.PathValue("vendorID"), &vendorID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendorID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVendorsVendorID(w, r, vendorID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVendorsVendorID operation middleware
func (siw *ServerInterfaceWrapper) GetVendorsVendorID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendorID" -------------
	var vendorID int

	err = runtime.BindStyledParameterWithOptions("simple", "vendorID", r.PathValue("vendorID"), &vendorID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendorID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVendorsVendorID(w, r, vendorID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.GetModels)
	m.HandleFunc("GET "+options.BaseURL+"/vendors", wrapper.GetVendors)
	m.HandleFunc("POST "+options.BaseURL+"/vendors", wrapper.PostVendors)
	m.HandleFunc("DELETE "+options.BaseURL+"/vendors/{vendorID}", wrapper.DeleteVendorsVendorID)
	m.HandleFunc("GET "+options.BaseURL+"/vendors/{vendorID}", wrapper.GetVendorsVendorID)

	return m
}

type GetModelsRequestObject struct {
}

type GetModelsResponseObject interface {
	VisitGetModelsResponse(w http.ResponseWriter) error
}

type GetModels200JSONResponse ModelCollection

func (response GetModels200JSONResponse) VisitGetModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsRequestObject struct {
}

type GetVendorsResponseObject interface {
	VisitGetVendorsResponse(w http.ResponseWriter) error
}

type GetVendors200JSONResponse VendorCollection

func (response GetVendors200JSONResponse) VisitGetVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostVendorsRequestObject struct {
	Body *PostVendorsJSONRequestBody
}

type PostVendorsResponseObject interface {
	VisitPostVendorsResponse(w http.ResponseWriter) error
}

type PostVendors201JSONResponse Vendor

func (response PostVendors201JSONResponse) VisitPostVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostVendors400JSONResponse APIError

func (response PostVendors400JSONResponse) VisitPostVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVendorsVendorIDRequestObject struct {
	VendorID int `json:"vendorID"`
}

type DeleteVendorsVendorIDResponseObject interface {
	VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error
}

type DeleteVendorsVendorID204Response struct {
}

func (response DeleteVendorsVendorID204Response) VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteVendorsVendorID404JSONResponse APIError

func (response DeleteVendorsVendorID404JSONResponse) VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorIDRequestObject struct {
	VendorID int `json:"vendorID"`
}

type GetVendorsVendorIDResponseObject interface {
	VisitGetVendorsVendorIDResponse(w http.ResponseWriter) error
}

type GetVendorsVendorID200JSONResponse Vendor

func (response GetVendorsVendorID200JSONResponse) VisitGetVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorID404JSONResponse APIError

func (response GetVendorsVendorID404JSONResponse) VisitGetVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /models)
	GetModels(ctx context.Context, request GetModelsRequestObject) (GetModelsResponseObject, error)

	// (GET /vendors)
	GetVendors(ctx context.Context, request GetVendorsRequestObject) (GetVendorsResponseObject, error)

	// (POST /vendors)
	PostVendors(ctx context.Context, request PostVendorsRequestObject) (PostVendorsResponseObject, error)

	// (DELETE /vendors/{vendorID})
	DeleteVendorsVendorID(ctx context.Context, request DeleteVendorsVendorIDRequestObject) (DeleteVendorsVendorIDResponseObject, error)

	// (GET /vendors/{vendorID})
	GetVendorsVendorID(ctx context.Context, request GetVendorsVendorIDRequestObject) (GetVendorsVendorIDResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetModels operation middleware
func (sh *strictHandler) GetModels(w http.ResponseWriter, r *http.Request) {
	var request GetModelsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetModels(ctx, request.(GetModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetModelsResponseObject); ok {
		if err := validResponse.VisitGetModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVendors operation middleware
func (sh *strictHandler) GetVendors(w http.ResponseWriter, r *http.Request) {
	var request GetVendorsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVendors(ctx, request.(GetVendorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVendors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVendorsResponseObject); ok {
		if err := validResponse.VisitGetVendorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostVendors operation middleware
func (sh *strictHandler) PostVendors(w http.ResponseWriter, r *http.Request) {
	var request PostVendorsRequestObject

	var body PostVendorsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostVendors(ctx, request.(PostVendorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostVendors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostVendorsResponseObject); ok {
		if err := validResponse.VisitPostVendorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteVendorsVendorID operation middleware
func (sh *strictHandler) DeleteVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int) {
	var request DeleteVendorsVendorIDRequestObject

	request.VendorID = vendorID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteVendorsVendorID(ctx, request.(DeleteVendorsVendorIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteVendorsVendorID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteVendorsVendorIDResponseObject); ok {
		if err := validResponse.VisitDeleteVendorsVendorIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVendorsVendorID operation middleware
func (sh *strictHandler) GetVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int) {
	var request GetVendorsVendorIDRequestObject

	request.VendorID = vendorID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVendorsVendorID(ctx, request.(GetVendorsVendorIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVendorsVendorID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVendorsVendorIDResponseObject); ok {
		if err := validResponse.VisitGetVendorsVendorIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
