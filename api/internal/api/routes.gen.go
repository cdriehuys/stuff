//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// APIError defines model for APIError.
type APIError struct {
	// Fields An array of errors associated with specific fields.
	Fields *[]FieldError `json:"fields,omitempty"`

	// Message A high-level overview of the error condition.
	Message *string `json:"message,omitempty"`
}

// Asset defines model for Asset.
type Asset struct {
	// Comments Free text relating to the asset.
	Comments *string `json:"comments,omitempty"`

	// CreatedAt The instant the vendor was added to the system.
	CreatedAt time.Time `json:"createdAt"`

	// Id A unique identifier for the asset.
	Id int `json:"id"`

	// ModelID The ID of the model that this asset is an instance of.
	ModelID int `json:"modelID"`

	// Serial The asset's serial number.
	Serial *string `json:"serial,omitempty"`

	// UpdatedAt The instant the vendor's information was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AssetCollection defines model for AssetCollection.
type AssetCollection struct {
	Items []Asset `json:"items"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	// Field The name of a field that failed validation.
	Field string `json:"field"`

	// Message A description of why the field is invalid.
	Message string `json:"message"`
}

// Model defines model for Model.
type Model struct {
	// CreatedAt The instant the vendor was added to the system.
	CreatedAt time.Time `json:"createdAt"`

	// Id A unique identifier for the model.
	Id int `json:"id"`

	// Model The unique vendor-provided identifier for the model.
	Model string `json:"model"`

	// Name A readable name for the vendor.
	Name string `json:"name"`

	// UpdatedAt The instant the vendor's information was last updated.
	UpdatedAt time.Time `json:"updatedAt"`

	// VendorID The ID of the vendor who produces the model.
	VendorID int `json:"vendorID"`
}

// ModelCollection defines model for ModelCollection.
type ModelCollection struct {
	Items []Model `json:"items"`
}

// NewAsset defines model for NewAsset.
type NewAsset struct {
	// Comments Free text relating to the asset.
	Comments *string `json:"comments,omitempty"`

	// ModelID The ID of the model that this asset is an instance of.
	ModelID int `json:"modelID"`

	// Serial The asset's serial number.
	Serial string `json:"serial"`
}

// NewModel defines model for NewModel.
type NewModel struct {
	// Model The unique vendor-provided identifier for the model.
	Model string `json:"model"`

	// Name A readable name for the vendor.
	Name *string `json:"name,omitempty"`

	// VendorID The ID of the vendor that produces the model.
	VendorID int `json:"vendorID"`
}

// NewVendor defines model for NewVendor.
type NewVendor struct {
	// Name A readable name for the vendor.
	Name string `json:"name"`
}

// Vendor defines model for Vendor.
type Vendor struct {
	// CreatedAt The instant the vendor was added to the system.
	CreatedAt time.Time `json:"createdAt"`

	// Id A unique identifier for the vendor.
	Id int `json:"id"`

	// Name A readable name for the vendor.
	Name string `json:"name"`

	// UpdatedAt The instant the vendor's information was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// VendorCollection defines model for VendorCollection.
type VendorCollection struct {
	Items []Vendor `json:"items"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest = APIError

// NotFound defines model for NotFound.
type NotFound = APIError

// ServerError defines model for ServerError.
type ServerError = APIError

// PostAssetsJSONRequestBody defines body for PostAssets for application/json ContentType.
type PostAssetsJSONRequestBody = NewAsset

// PutAssetsAssetIDJSONRequestBody defines body for PutAssetsAssetID for application/json ContentType.
type PutAssetsAssetIDJSONRequestBody = NewAsset

// PostModelsJSONRequestBody defines body for PostModels for application/json ContentType.
type PostModelsJSONRequestBody = NewModel

// PutModelsModelIDJSONRequestBody defines body for PutModelsModelID for application/json ContentType.
type PutModelsModelIDJSONRequestBody = NewModel

// PostVendorsJSONRequestBody defines body for PostVendors for application/json ContentType.
type PostVendorsJSONRequestBody = NewVendor

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /assets)
	GetAssets(w http.ResponseWriter, r *http.Request)
	// Create asset
	// (POST /assets)
	PostAssets(w http.ResponseWriter, r *http.Request)

	// (DELETE /assets/{assetID})
	DeleteAssetsAssetID(w http.ResponseWriter, r *http.Request, assetID int)

	// (GET /assets/{assetID})
	GetAssetsAssetID(w http.ResponseWriter, r *http.Request, assetID int)

	// (PUT /assets/{assetID})
	PutAssetsAssetID(w http.ResponseWriter, r *http.Request, assetID int)

	// (GET /models)
	GetModels(w http.ResponseWriter, r *http.Request)
	// Create model
	// (POST /models)
	PostModels(w http.ResponseWriter, r *http.Request)

	// (DELETE /models/{modelID})
	DeleteModelsModelID(w http.ResponseWriter, r *http.Request, modelID int)

	// (GET /models/{modelID})
	GetModelsModelID(w http.ResponseWriter, r *http.Request, modelID int)

	// (PUT /models/{modelID})
	PutModelsModelID(w http.ResponseWriter, r *http.Request, modelID int)

	// (GET /vendors)
	GetVendors(w http.ResponseWriter, r *http.Request)

	// (POST /vendors)
	PostVendors(w http.ResponseWriter, r *http.Request)

	// (DELETE /vendors/{vendorID})
	DeleteVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int)

	// (GET /vendors/{vendorID})
	GetVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int)
	// List vendor models
	// (GET /vendors/{vendorID}/models)
	GetVendorsVendorIDModels(w http.ResponseWriter, r *http.Request, vendorID int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAssets operation middleware
func (siw *ServerInterfaceWrapper) GetAssets(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAssets operation middleware
func (siw *ServerInterfaceWrapper) PostAssets(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAssets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAssetsAssetID operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssetsAssetID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "assetID" -------------
	var assetID int

	err = runtime.BindStyledParameterWithOptions("simple", "assetID", r.PathValue("assetID"), &assetID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assetID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAssetsAssetID(w, r, assetID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAssetsAssetID operation middleware
func (siw *ServerInterfaceWrapper) GetAssetsAssetID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "assetID" -------------
	var assetID int

	err = runtime.BindStyledParameterWithOptions("simple", "assetID", r.PathValue("assetID"), &assetID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assetID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAssetsAssetID(w, r, assetID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAssetsAssetID operation middleware
func (siw *ServerInterfaceWrapper) PutAssetsAssetID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "assetID" -------------
	var assetID int

	err = runtime.BindStyledParameterWithOptions("simple", "assetID", r.PathValue("assetID"), &assetID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "assetID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAssetsAssetID(w, r, assetID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetModels operation middleware
func (siw *ServerInterfaceWrapper) GetModels(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostModels operation middleware
func (siw *ServerInterfaceWrapper) PostModels(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteModelsModelID operation middleware
func (siw *ServerInterfaceWrapper) DeleteModelsModelID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "modelID" -------------
	var modelID int

	err = runtime.BindStyledParameterWithOptions("simple", "modelID", r.PathValue("modelID"), &modelID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "modelID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModelsModelID(w, r, modelID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetModelsModelID operation middleware
func (siw *ServerInterfaceWrapper) GetModelsModelID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "modelID" -------------
	var modelID int

	err = runtime.BindStyledParameterWithOptions("simple", "modelID", r.PathValue("modelID"), &modelID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "modelID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModelsModelID(w, r, modelID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutModelsModelID operation middleware
func (siw *ServerInterfaceWrapper) PutModelsModelID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "modelID" -------------
	var modelID int

	err = runtime.BindStyledParameterWithOptions("simple", "modelID", r.PathValue("modelID"), &modelID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "modelID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModelsModelID(w, r, modelID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVendors operation middleware
func (siw *ServerInterfaceWrapper) GetVendors(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVendors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostVendors operation middleware
func (siw *ServerInterfaceWrapper) PostVendors(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostVendors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteVendorsVendorID operation middleware
func (siw *ServerInterfaceWrapper) DeleteVendorsVendorID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendorID" -------------
	var vendorID int

	err = runtime.BindStyledParameterWithOptions("simple", "vendorID", r.PathValue("vendorID"), &vendorID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendorID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVendorsVendorID(w, r, vendorID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVendorsVendorID operation middleware
func (siw *ServerInterfaceWrapper) GetVendorsVendorID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendorID" -------------
	var vendorID int

	err = runtime.BindStyledParameterWithOptions("simple", "vendorID", r.PathValue("vendorID"), &vendorID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendorID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVendorsVendorID(w, r, vendorID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVendorsVendorIDModels operation middleware
func (siw *ServerInterfaceWrapper) GetVendorsVendorIDModels(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vendorID" -------------
	var vendorID int

	err = runtime.BindStyledParameterWithOptions("simple", "vendorID", r.PathValue("vendorID"), &vendorID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vendorID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVendorsVendorIDModels(w, r, vendorID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/assets", wrapper.GetAssets)
	m.HandleFunc("POST "+options.BaseURL+"/assets", wrapper.PostAssets)
	m.HandleFunc("DELETE "+options.BaseURL+"/assets/{assetID}", wrapper.DeleteAssetsAssetID)
	m.HandleFunc("GET "+options.BaseURL+"/assets/{assetID}", wrapper.GetAssetsAssetID)
	m.HandleFunc("PUT "+options.BaseURL+"/assets/{assetID}", wrapper.PutAssetsAssetID)
	m.HandleFunc("GET "+options.BaseURL+"/models", wrapper.GetModels)
	m.HandleFunc("POST "+options.BaseURL+"/models", wrapper.PostModels)
	m.HandleFunc("DELETE "+options.BaseURL+"/models/{modelID}", wrapper.DeleteModelsModelID)
	m.HandleFunc("GET "+options.BaseURL+"/models/{modelID}", wrapper.GetModelsModelID)
	m.HandleFunc("PUT "+options.BaseURL+"/models/{modelID}", wrapper.PutModelsModelID)
	m.HandleFunc("GET "+options.BaseURL+"/vendors", wrapper.GetVendors)
	m.HandleFunc("POST "+options.BaseURL+"/vendors", wrapper.PostVendors)
	m.HandleFunc("DELETE "+options.BaseURL+"/vendors/{vendorID}", wrapper.DeleteVendorsVendorID)
	m.HandleFunc("GET "+options.BaseURL+"/vendors/{vendorID}", wrapper.GetVendorsVendorID)
	m.HandleFunc("GET "+options.BaseURL+"/vendors/{vendorID}/models", wrapper.GetVendorsVendorIDModels)

	return m
}

type InvalidRequestJSONResponse APIError

type NotFoundJSONResponse APIError

type ServerErrorJSONResponse APIError

type GetAssetsRequestObject struct {
}

type GetAssetsResponseObject interface {
	VisitGetAssetsResponse(w http.ResponseWriter) error
}

type GetAssets200JSONResponse AssetCollection

func (response GetAssets200JSONResponse) VisitGetAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAssets500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetAssets500JSONResponse) VisitGetAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAssetsRequestObject struct {
	Body *PostAssetsJSONRequestBody
}

type PostAssetsResponseObject interface {
	VisitPostAssetsResponse(w http.ResponseWriter) error
}

type PostAssets201JSONResponse Asset

func (response PostAssets201JSONResponse) VisitPostAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAssets400JSONResponse struct{ InvalidRequestJSONResponse }

func (response PostAssets400JSONResponse) VisitPostAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAssets404JSONResponse struct{ NotFoundJSONResponse }

func (response PostAssets404JSONResponse) VisitPostAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostAssets500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostAssets500JSONResponse) VisitPostAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAssetsAssetIDRequestObject struct {
	AssetID int `json:"assetID"`
}

type DeleteAssetsAssetIDResponseObject interface {
	VisitDeleteAssetsAssetIDResponse(w http.ResponseWriter) error
}

type DeleteAssetsAssetID204Response struct {
}

func (response DeleteAssetsAssetID204Response) VisitDeleteAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAssetsAssetID404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteAssetsAssetID404JSONResponse) VisitDeleteAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAssetsAssetID500JSONResponse struct{ ServerErrorJSONResponse }

func (response DeleteAssetsAssetID500JSONResponse) VisitDeleteAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAssetsAssetIDRequestObject struct {
	AssetID int `json:"assetID"`
}

type GetAssetsAssetIDResponseObject interface {
	VisitGetAssetsAssetIDResponse(w http.ResponseWriter) error
}

type GetAssetsAssetID200JSONResponse Asset

func (response GetAssetsAssetID200JSONResponse) VisitGetAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAssetsAssetID404JSONResponse struct{ NotFoundJSONResponse }

func (response GetAssetsAssetID404JSONResponse) VisitGetAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAssetsAssetID500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetAssetsAssetID500JSONResponse) VisitGetAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutAssetsAssetIDRequestObject struct {
	AssetID int `json:"assetID"`
	Body    *PutAssetsAssetIDJSONRequestBody
}

type PutAssetsAssetIDResponseObject interface {
	VisitPutAssetsAssetIDResponse(w http.ResponseWriter) error
}

type PutAssetsAssetID200JSONResponse Asset

func (response PutAssetsAssetID200JSONResponse) VisitPutAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAssetsAssetID400JSONResponse struct{ InvalidRequestJSONResponse }

func (response PutAssetsAssetID400JSONResponse) VisitPutAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutAssetsAssetID404JSONResponse struct{ NotFoundJSONResponse }

func (response PutAssetsAssetID404JSONResponse) VisitPutAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutAssetsAssetID500JSONResponse struct{ ServerErrorJSONResponse }

func (response PutAssetsAssetID500JSONResponse) VisitPutAssetsAssetIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetModelsRequestObject struct {
}

type GetModelsResponseObject interface {
	VisitGetModelsResponse(w http.ResponseWriter) error
}

type GetModels200JSONResponse ModelCollection

func (response GetModels200JSONResponse) VisitGetModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetModels500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetModels500JSONResponse) VisitGetModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostModelsRequestObject struct {
	Body *PostModelsJSONRequestBody
}

type PostModelsResponseObject interface {
	VisitPostModelsResponse(w http.ResponseWriter) error
}

type PostModels201JSONResponse Model

func (response PostModels201JSONResponse) VisitPostModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostModels400JSONResponse struct{ InvalidRequestJSONResponse }

func (response PostModels400JSONResponse) VisitPostModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostModels404JSONResponse struct{ NotFoundJSONResponse }

func (response PostModels404JSONResponse) VisitPostModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostModels500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostModels500JSONResponse) VisitPostModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModelsModelIDRequestObject struct {
	ModelID int `json:"modelID"`
}

type DeleteModelsModelIDResponseObject interface {
	VisitDeleteModelsModelIDResponse(w http.ResponseWriter) error
}

type DeleteModelsModelID204Response struct {
}

func (response DeleteModelsModelID204Response) VisitDeleteModelsModelIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteModelsModelID400JSONResponse struct{ InvalidRequestJSONResponse }

func (response DeleteModelsModelID400JSONResponse) VisitDeleteModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModelsModelID404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteModelsModelID404JSONResponse) VisitDeleteModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModelsModelID500JSONResponse struct{ ServerErrorJSONResponse }

func (response DeleteModelsModelID500JSONResponse) VisitDeleteModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetModelsModelIDRequestObject struct {
	ModelID int `json:"modelID"`
}

type GetModelsModelIDResponseObject interface {
	VisitGetModelsModelIDResponse(w http.ResponseWriter) error
}

type GetModelsModelID200JSONResponse Model

func (response GetModelsModelID200JSONResponse) VisitGetModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetModelsModelID404JSONResponse struct{ NotFoundJSONResponse }

func (response GetModelsModelID404JSONResponse) VisitGetModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetModelsModelID500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetModelsModelID500JSONResponse) VisitGetModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutModelsModelIDRequestObject struct {
	ModelID int `json:"modelID"`
	Body    *PutModelsModelIDJSONRequestBody
}

type PutModelsModelIDResponseObject interface {
	VisitPutModelsModelIDResponse(w http.ResponseWriter) error
}

type PutModelsModelID200JSONResponse Model

func (response PutModelsModelID200JSONResponse) VisitPutModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutModelsModelID400JSONResponse struct{ InvalidRequestJSONResponse }

func (response PutModelsModelID400JSONResponse) VisitPutModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutModelsModelID404JSONResponse struct{ NotFoundJSONResponse }

func (response PutModelsModelID404JSONResponse) VisitPutModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutModelsModelID500JSONResponse struct{ ServerErrorJSONResponse }

func (response PutModelsModelID500JSONResponse) VisitPutModelsModelIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsRequestObject struct {
}

type GetVendorsResponseObject interface {
	VisitGetVendorsResponse(w http.ResponseWriter) error
}

type GetVendors200JSONResponse VendorCollection

func (response GetVendors200JSONResponse) VisitGetVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVendors500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetVendors500JSONResponse) VisitGetVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostVendorsRequestObject struct {
	Body *PostVendorsJSONRequestBody
}

type PostVendorsResponseObject interface {
	VisitPostVendorsResponse(w http.ResponseWriter) error
}

type PostVendors201JSONResponse Vendor

func (response PostVendors201JSONResponse) VisitPostVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostVendors400JSONResponse struct{ InvalidRequestJSONResponse }

func (response PostVendors400JSONResponse) VisitPostVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostVendors500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostVendors500JSONResponse) VisitPostVendorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVendorsVendorIDRequestObject struct {
	VendorID int `json:"vendorID"`
}

type DeleteVendorsVendorIDResponseObject interface {
	VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error
}

type DeleteVendorsVendorID204Response struct {
}

func (response DeleteVendorsVendorID204Response) VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteVendorsVendorID400JSONResponse struct{ InvalidRequestJSONResponse }

func (response DeleteVendorsVendorID400JSONResponse) VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVendorsVendorID404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteVendorsVendorID404JSONResponse) VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVendorsVendorID500JSONResponse struct{ ServerErrorJSONResponse }

func (response DeleteVendorsVendorID500JSONResponse) VisitDeleteVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorIDRequestObject struct {
	VendorID int `json:"vendorID"`
}

type GetVendorsVendorIDResponseObject interface {
	VisitGetVendorsVendorIDResponse(w http.ResponseWriter) error
}

type GetVendorsVendorID200JSONResponse Vendor

func (response GetVendorsVendorID200JSONResponse) VisitGetVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorID404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVendorsVendorID404JSONResponse) VisitGetVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorID500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetVendorsVendorID500JSONResponse) VisitGetVendorsVendorIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorIDModelsRequestObject struct {
	VendorID int `json:"vendorID"`
}

type GetVendorsVendorIDModelsResponseObject interface {
	VisitGetVendorsVendorIDModelsResponse(w http.ResponseWriter) error
}

type GetVendorsVendorIDModels200JSONResponse ModelCollection

func (response GetVendorsVendorIDModels200JSONResponse) VisitGetVendorsVendorIDModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorIDModels404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVendorsVendorIDModels404JSONResponse) VisitGetVendorsVendorIDModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVendorsVendorIDModels500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetVendorsVendorIDModels500JSONResponse) VisitGetVendorsVendorIDModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /assets)
	GetAssets(ctx context.Context, request GetAssetsRequestObject) (GetAssetsResponseObject, error)
	// Create asset
	// (POST /assets)
	PostAssets(ctx context.Context, request PostAssetsRequestObject) (PostAssetsResponseObject, error)

	// (DELETE /assets/{assetID})
	DeleteAssetsAssetID(ctx context.Context, request DeleteAssetsAssetIDRequestObject) (DeleteAssetsAssetIDResponseObject, error)

	// (GET /assets/{assetID})
	GetAssetsAssetID(ctx context.Context, request GetAssetsAssetIDRequestObject) (GetAssetsAssetIDResponseObject, error)

	// (PUT /assets/{assetID})
	PutAssetsAssetID(ctx context.Context, request PutAssetsAssetIDRequestObject) (PutAssetsAssetIDResponseObject, error)

	// (GET /models)
	GetModels(ctx context.Context, request GetModelsRequestObject) (GetModelsResponseObject, error)
	// Create model
	// (POST /models)
	PostModels(ctx context.Context, request PostModelsRequestObject) (PostModelsResponseObject, error)

	// (DELETE /models/{modelID})
	DeleteModelsModelID(ctx context.Context, request DeleteModelsModelIDRequestObject) (DeleteModelsModelIDResponseObject, error)

	// (GET /models/{modelID})
	GetModelsModelID(ctx context.Context, request GetModelsModelIDRequestObject) (GetModelsModelIDResponseObject, error)

	// (PUT /models/{modelID})
	PutModelsModelID(ctx context.Context, request PutModelsModelIDRequestObject) (PutModelsModelIDResponseObject, error)

	// (GET /vendors)
	GetVendors(ctx context.Context, request GetVendorsRequestObject) (GetVendorsResponseObject, error)

	// (POST /vendors)
	PostVendors(ctx context.Context, request PostVendorsRequestObject) (PostVendorsResponseObject, error)

	// (DELETE /vendors/{vendorID})
	DeleteVendorsVendorID(ctx context.Context, request DeleteVendorsVendorIDRequestObject) (DeleteVendorsVendorIDResponseObject, error)

	// (GET /vendors/{vendorID})
	GetVendorsVendorID(ctx context.Context, request GetVendorsVendorIDRequestObject) (GetVendorsVendorIDResponseObject, error)
	// List vendor models
	// (GET /vendors/{vendorID}/models)
	GetVendorsVendorIDModels(ctx context.Context, request GetVendorsVendorIDModelsRequestObject) (GetVendorsVendorIDModelsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAssets operation middleware
func (sh *strictHandler) GetAssets(w http.ResponseWriter, r *http.Request) {
	var request GetAssetsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAssets(ctx, request.(GetAssetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAssets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAssetsResponseObject); ok {
		if err := validResponse.VisitGetAssetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAssets operation middleware
func (sh *strictHandler) PostAssets(w http.ResponseWriter, r *http.Request) {
	var request PostAssetsRequestObject

	var body PostAssetsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAssets(ctx, request.(PostAssetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAssets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAssetsResponseObject); ok {
		if err := validResponse.VisitPostAssetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAssetsAssetID operation middleware
func (sh *strictHandler) DeleteAssetsAssetID(w http.ResponseWriter, r *http.Request, assetID int) {
	var request DeleteAssetsAssetIDRequestObject

	request.AssetID = assetID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAssetsAssetID(ctx, request.(DeleteAssetsAssetIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAssetsAssetID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAssetsAssetIDResponseObject); ok {
		if err := validResponse.VisitDeleteAssetsAssetIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAssetsAssetID operation middleware
func (sh *strictHandler) GetAssetsAssetID(w http.ResponseWriter, r *http.Request, assetID int) {
	var request GetAssetsAssetIDRequestObject

	request.AssetID = assetID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAssetsAssetID(ctx, request.(GetAssetsAssetIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAssetsAssetID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAssetsAssetIDResponseObject); ok {
		if err := validResponse.VisitGetAssetsAssetIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAssetsAssetID operation middleware
func (sh *strictHandler) PutAssetsAssetID(w http.ResponseWriter, r *http.Request, assetID int) {
	var request PutAssetsAssetIDRequestObject

	request.AssetID = assetID

	var body PutAssetsAssetIDJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutAssetsAssetID(ctx, request.(PutAssetsAssetIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAssetsAssetID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutAssetsAssetIDResponseObject); ok {
		if err := validResponse.VisitPutAssetsAssetIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetModels operation middleware
func (sh *strictHandler) GetModels(w http.ResponseWriter, r *http.Request) {
	var request GetModelsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetModels(ctx, request.(GetModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetModelsResponseObject); ok {
		if err := validResponse.VisitGetModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostModels operation middleware
func (sh *strictHandler) PostModels(w http.ResponseWriter, r *http.Request) {
	var request PostModelsRequestObject

	var body PostModelsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostModels(ctx, request.(PostModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostModelsResponseObject); ok {
		if err := validResponse.VisitPostModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteModelsModelID operation middleware
func (sh *strictHandler) DeleteModelsModelID(w http.ResponseWriter, r *http.Request, modelID int) {
	var request DeleteModelsModelIDRequestObject

	request.ModelID = modelID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteModelsModelID(ctx, request.(DeleteModelsModelIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteModelsModelID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteModelsModelIDResponseObject); ok {
		if err := validResponse.VisitDeleteModelsModelIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetModelsModelID operation middleware
func (sh *strictHandler) GetModelsModelID(w http.ResponseWriter, r *http.Request, modelID int) {
	var request GetModelsModelIDRequestObject

	request.ModelID = modelID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetModelsModelID(ctx, request.(GetModelsModelIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetModelsModelID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetModelsModelIDResponseObject); ok {
		if err := validResponse.VisitGetModelsModelIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutModelsModelID operation middleware
func (sh *strictHandler) PutModelsModelID(w http.ResponseWriter, r *http.Request, modelID int) {
	var request PutModelsModelIDRequestObject

	request.ModelID = modelID

	var body PutModelsModelIDJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutModelsModelID(ctx, request.(PutModelsModelIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutModelsModelID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutModelsModelIDResponseObject); ok {
		if err := validResponse.VisitPutModelsModelIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVendors operation middleware
func (sh *strictHandler) GetVendors(w http.ResponseWriter, r *http.Request) {
	var request GetVendorsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVendors(ctx, request.(GetVendorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVendors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVendorsResponseObject); ok {
		if err := validResponse.VisitGetVendorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostVendors operation middleware
func (sh *strictHandler) PostVendors(w http.ResponseWriter, r *http.Request) {
	var request PostVendorsRequestObject

	var body PostVendorsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostVendors(ctx, request.(PostVendorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostVendors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostVendorsResponseObject); ok {
		if err := validResponse.VisitPostVendorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteVendorsVendorID operation middleware
func (sh *strictHandler) DeleteVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int) {
	var request DeleteVendorsVendorIDRequestObject

	request.VendorID = vendorID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteVendorsVendorID(ctx, request.(DeleteVendorsVendorIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteVendorsVendorID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteVendorsVendorIDResponseObject); ok {
		if err := validResponse.VisitDeleteVendorsVendorIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVendorsVendorID operation middleware
func (sh *strictHandler) GetVendorsVendorID(w http.ResponseWriter, r *http.Request, vendorID int) {
	var request GetVendorsVendorIDRequestObject

	request.VendorID = vendorID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVendorsVendorID(ctx, request.(GetVendorsVendorIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVendorsVendorID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVendorsVendorIDResponseObject); ok {
		if err := validResponse.VisitGetVendorsVendorIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVendorsVendorIDModels operation middleware
func (sh *strictHandler) GetVendorsVendorIDModels(w http.ResponseWriter, r *http.Request, vendorID int) {
	var request GetVendorsVendorIDModelsRequestObject

	request.VendorID = vendorID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVendorsVendorIDModels(ctx, request.(GetVendorsVendorIDModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVendorsVendorIDModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVendorsVendorIDModelsResponseObject); ok {
		if err := validResponse.VisitGetVendorsVendorIDModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
