// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: assets.sql

package queries

import (
	"context"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets(model_id, "serial", comments)
VALUES ($1, $2, $3)
RETURNING id, model_id, serial, comments, created_at, updated_at
`

type CreateAssetParams struct {
	ModelID  int64
	Serial   string
	Comments string
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, createAsset, arg.ModelID, arg.Serial, arg.Comments)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.Serial,
		&i.Comments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAssetByID = `-- name: DeleteAssetByID :execrows
DELETE FROM assets
WHERE id = $1
`

func (q *Queries) DeleteAssetByID(ctx context.Context, assetID int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAssetByID, assetID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAssetByID = `-- name: GetAssetByID :one
SELECT id, model_id, serial, comments, created_at, updated_at FROM assets WHERE id = $1
`

func (q *Queries) GetAssetByID(ctx context.Context, assetID int64) (Asset, error) {
	row := q.db.QueryRow(ctx, getAssetByID, assetID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.Serial,
		&i.Comments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAssets = `-- name: ListAssets :many
SELECT id, model_id, serial, comments, created_at, updated_at FROM assets ORDER BY id LIMIT 50
`

func (q *Queries) ListAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.Query(ctx, listAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.ModelID,
			&i.Serial,
			&i.Comments,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssetByID = `-- name: UpdateAssetByID :one
UPDATE assets
SET model_id = $1, "serial" = $2, comments = $3
WHERE id = $4
RETURNING id, model_id, serial, comments, created_at, updated_at
`

type UpdateAssetByIDParams struct {
	ModelID  int64
	Serial   string
	Comments string
	AssetID  int64
}

func (q *Queries) UpdateAssetByID(ctx context.Context, arg UpdateAssetByIDParams) (Asset, error) {
	row := q.db.QueryRow(ctx, updateAssetByID,
		arg.ModelID,
		arg.Serial,
		arg.Comments,
		arg.AssetID,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.Serial,
		&i.Comments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
