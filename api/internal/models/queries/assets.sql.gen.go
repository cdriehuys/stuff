// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: assets.sql

package queries

import (
	"context"
)

const createAsset = `-- name: CreateAsset :one
WITH model AS (SELECT id, model, vendor_id, name, created_at, updated_at FROM models WHERE id = $1)
INSERT INTO assets(model_id, "serial", comments)
VALUES ($1, $2, $3)
RETURNING assets.id, assets.model_id, assets.serial, assets.comments, assets.created_at, assets.updated_at, (SELECT vendor_id FROM model) AS vendor_id
`

type CreateAssetParams struct {
	ModelID  int64
	Serial   string
	Comments string
}

type CreateAssetRow struct {
	Asset    Asset
	VendorID int64
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (CreateAssetRow, error) {
	row := q.db.QueryRow(ctx, createAsset, arg.ModelID, arg.Serial, arg.Comments)
	var i CreateAssetRow
	err := row.Scan(
		&i.Asset.ID,
		&i.Asset.ModelID,
		&i.Asset.Serial,
		&i.Asset.Comments,
		&i.Asset.CreatedAt,
		&i.Asset.UpdatedAt,
		&i.VendorID,
	)
	return i, err
}

const deleteAssetByID = `-- name: DeleteAssetByID :execrows
DELETE FROM assets
WHERE id = $1
`

func (q *Queries) DeleteAssetByID(ctx context.Context, assetID int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAssetByID, assetID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAssetByID = `-- name: GetAssetByID :one
SELECT a.id, a.model_id, a.serial, a.comments, a.created_at, a.updated_at, m.vendor_id
FROM assets a
    JOIN models m ON a.model_id = m.id
WHERE a.id = $1
`

type GetAssetByIDRow struct {
	Asset    Asset
	VendorID int64
}

func (q *Queries) GetAssetByID(ctx context.Context, assetID int64) (GetAssetByIDRow, error) {
	row := q.db.QueryRow(ctx, getAssetByID, assetID)
	var i GetAssetByIDRow
	err := row.Scan(
		&i.Asset.ID,
		&i.Asset.ModelID,
		&i.Asset.Serial,
		&i.Asset.Comments,
		&i.Asset.CreatedAt,
		&i.Asset.UpdatedAt,
		&i.VendorID,
	)
	return i, err
}

const listAssets = `-- name: ListAssets :many
SELECT a.id, a.model_id, a.serial, a.comments, a.created_at, a.updated_at, m.vendor_id
FROM assets a
    JOIN models m ON a.model_id = m.id
ORDER BY a.id
LIMIT 50
`

type ListAssetsRow struct {
	Asset    Asset
	VendorID int64
}

func (q *Queries) ListAssets(ctx context.Context) ([]ListAssetsRow, error) {
	rows, err := q.db.Query(ctx, listAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAssetsRow
	for rows.Next() {
		var i ListAssetsRow
		if err := rows.Scan(
			&i.Asset.ID,
			&i.Asset.ModelID,
			&i.Asset.Serial,
			&i.Asset.Comments,
			&i.Asset.CreatedAt,
			&i.Asset.UpdatedAt,
			&i.VendorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssetsByModel = `-- name: ListAssetsByModel :many
SELECT a.id, a.model_id, a.serial, a.comments, a.created_at, a.updated_at, m.vendor_id
FROM assets a
    JOIN models m ON a.model_id = m.id
WHERE a.model_id = $1
ORDER BY a.id
LIMIT 50
`

type ListAssetsByModelRow struct {
	Asset    Asset
	VendorID int64
}

func (q *Queries) ListAssetsByModel(ctx context.Context, modelID int64) ([]ListAssetsByModelRow, error) {
	rows, err := q.db.Query(ctx, listAssetsByModel, modelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAssetsByModelRow
	for rows.Next() {
		var i ListAssetsByModelRow
		if err := rows.Scan(
			&i.Asset.ID,
			&i.Asset.ModelID,
			&i.Asset.Serial,
			&i.Asset.Comments,
			&i.Asset.CreatedAt,
			&i.Asset.UpdatedAt,
			&i.VendorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssetByID = `-- name: UpdateAssetByID :one
WITH model AS (SELECT id, model, vendor_id, name, created_at, updated_at FROM models WHERE id = $1)
UPDATE assets a
SET model_id = $1, "serial" = $2, comments = $3
WHERE a.id = $4
RETURNING a.id, a.model_id, a.serial, a.comments, a.created_at, a.updated_at, (SELECT vendor_id FROM model) AS vendor_id
`

type UpdateAssetByIDParams struct {
	ModelID  int64
	Serial   string
	Comments string
	AssetID  int64
}

type UpdateAssetByIDRow struct {
	Asset    Asset
	VendorID int64
}

func (q *Queries) UpdateAssetByID(ctx context.Context, arg UpdateAssetByIDParams) (UpdateAssetByIDRow, error) {
	row := q.db.QueryRow(ctx, updateAssetByID,
		arg.ModelID,
		arg.Serial,
		arg.Comments,
		arg.AssetID,
	)
	var i UpdateAssetByIDRow
	err := row.Scan(
		&i.Asset.ID,
		&i.Asset.ModelID,
		&i.Asset.Serial,
		&i.Asset.Comments,
		&i.Asset.CreatedAt,
		&i.Asset.UpdatedAt,
		&i.VendorID,
	)
	return i, err
}
