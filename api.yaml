openapi: "3.0.0"
info:
  version: "0.0.1" # x-release-please-version
  title: Manage stuff you own

servers:
  - url: http://localhost:8080
    description: Local development

paths:
  /assets:
    get:
      responses:
        "200":
          description: Asset list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetCollection"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      summary: Create asset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAsset"
      responses:
        "201":
          description: Asset created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /assets/{assetID}:
    parameters:
      - name: assetID
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the asset to operate on.
          example: 42

    get:
      responses:
        "200":
          description: Asset found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAsset"
      responses:
        "200":
          description: Asset updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    delete:
      responses:
        "204":
          description: Asset deleted
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /models:
    get:
      responses:
        "200":
          description: Model list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelCollection"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      summary: Create model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewModel"
      responses:
        "201":
          description: Model created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /models/{modelID}:
    parameters:
      - name: modelID
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the model to retrieve.
          example: 17

    get:
      responses:
        "200":
          description: Model found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewModel"
      responses:
        "200":
          description: Model updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    delete:
      responses:
        "204":
          description: Model deleted
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /vendors:
    get:
      responses:
        "200":
          description: Vendor list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VendorCollection"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewVendor"

      responses:
        "201":
          description: Vendor created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vendor"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /vendors/{vendorID}:
    parameters:
      - name: vendorID
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the vendor to retrieve.
          example: 17
    get:
      responses:
        "200":
          description: Vendor found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vendor"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

    delete:
      responses:
        "204":
          description: Vendor deleted
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /vendors/{vendorID}/models:
    parameters:
      - name: vendorID
        in: path
        required: true
        schema:
          type: integer
          description: The ID of the vendor to retrieve.
          example: 17

    get:
      summary: List vendor models
      responses:
        "200":
          description: Listed vendor models
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelCollection"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  responses:
    InvalidRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"

  schemas:
    Asset:
      type: object
      required:
        - id
        - modelID
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          description: A unique identifier for the asset.
          example: 12
        modelID:
          type: integer
          description: The ID of the model that this asset is an instance of.
          example: 17
        serial:
          type: string
          description: The asset's serial number.
        comments:
          type: string
          description: Free text relating to the asset.
        createdAt:
          type: string
          format: date-time
          description: The instant the vendor was added to the system.
        updatedAt:
          type: string
          format: date-time
          description: The instant the vendor's information was last updated.

    NewAsset:
      type: object
      required:
        - modelID
        - serial
      properties:
        modelID:
          type: integer
          description: The ID of the model that this asset is an instance of.
          example: 17
        serial:
          type: string
          description: The asset's serial number.
        comments:
          type: string
          description: Free text relating to the asset.
          example: Only works if facing west.

    AssetCollection:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Asset"

    Model:
      type: object
      required:
        - id
        - model
        - vendorID
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          description: A unique identifier for the model.
        model:
          type: string
          description: The unique vendor-provided identifier for the model.
        vendorID:
          type: integer
          description: The ID of the vendor who produces the model.
        name:
          type: string
          description: A readable name for the vendor.
          example: Acme Inc.
        createdAt:
          type: string
          format: date-time
          description: The instant the vendor was added to the system.
        updatedAt:
          type: string
          format: date-time
          description: The instant the vendor's information was last updated.

    NewModel:
      type: object
      required:
        - model
        - vendorID
      properties:
        model:
          type: string
          description: The unique vendor-provided identifier for the model.
        name:
          type: string
          description: A readable name for the vendor.
          example: Acme Inc.
        vendorID:
          type: integer
          description: The ID of the vendor that produces the model.
          example: 36

    Vendor:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          description: A unique identifier for the vendor.
        name:
          type: string
          description: A readable name for the vendor.
          example: Acme Inc.
        createdAt:
          type: string
          format: date-time
          description: The instant the vendor was added to the system.
        updatedAt:
          type: string
          format: date-time
          description: The instant the vendor's information was last updated.

    NewVendor:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: A readable name for the vendor.
          example: Acme Inc.
          pattern: '^\s{1,150}$'

    ModelCollection:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Model"

    VendorCollection:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Vendor"

    APIError:
      type: object
      properties:
        fields:
          type: array
          description: An array of errors associated with specific fields.
          items:
            $ref: "#/components/schemas/FieldError"
        message:
          type: string
          description: A high-level overview of the error condition.
          example: No widget found with ID 24.

    FieldError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: The name of a field that failed validation.
          example: username
        message:
          type: string
          description: A description of why the field is invalid.
          example: This field must be between 1 and 20 characters long.
